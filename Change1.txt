Chapter 1
1.2
-- Functions in Haskell are first class meaning they can be used 
    -- as values or passed as arguments or imputs in other functions
    -- ie as HOFs.
-- All FP based on lambda calculus. Haskell is a pure FPL
    -- purity == referential transparency (RT);
        -- means the same function given the same arguments to be evaluated
        -- will always return the same results in a pure FPL just as in Math.
1.3
-- Functions are relation mechanisims between a set of
    -- possible inputs and a set of possible outputs
    -- arguments are always mapped to the parameters
        ex. 😎
                ƒ(1) = A 
                ƒ(2) = B
                ƒ(3) = C
            -- the input (domain) is set to {1,2,3} and th outputs (codomain)
            -- are {A, B, C}
        -- The most important factor is that these functions will always
            return (A) given the input (1) with no exceptions.

    ex. of invalid 😵‍💫
              ƒ(1) = X
              ƒ(1) = Y
              ƒ(2) = Z
            -- this is incorrect because of the principal of RT
                the same input must produce the same output, it should be predictable
    
    -- This is valid, even though there are different inputs the outputs can have the
        same value, this is no problem

    ƒ(1) = A 
    ƒ(2) = A
    ƒ(3) = A
    -- Just as this is valid:
    ƒ (a b) = \a b -> a(3) + b(2) = 5
    ƒ (c d) = \c d -> c(4) + d(1) = 5
    ƒ (e f) = \e f -> e(5) + e(0) = 5
-- The gist is the importance of the relationship betwenn the inputs and outputs,
   that once a function is given an input the output should be predictable/consistant.

-- Functions are nothing but mappings of a set of inputs to a set of outputs. 
1.4
-- Lambda calculus has three basic components/lambda terms
    1. ) expression 2.) variables 3.) abstractions
    An expression is a superset of the other 2, variables names, an abstractions or a combonation.
    -- the simplest expression is a single variable.
    -- variables have no meaning or value; they are only names for potential
        inputs in a function.
    -- and abstraction is a function. 
    -- abstractions consist of 2 parts: the head and the body.
        the head of the function is a 𝝺 (lambda) followed by a variable name
        the body of the function is also an expression 
            a simple function might look like this:

                𝝺𝞌 𝞌 => is called and anonymous function (AF)

            the variable (𝞌) name in the head (𝝺𝞌)is the parameter
            and connects all the instances of the same variable in the function body.
            . each 𝞌 will have the value of that argument

        -- a named function can be called by another function by an AF cannot.
    -- Alpha equivalence (AE)
        the typical expression of AE in Lambda cal:
            𝝺𝞌 𝞌
        the variable is not semantically meaningful expect in the role of a 
        singular expression, this is AE.
            𝝺𝞌.𝞌
            𝝺ȥ.ȥ
            𝝺ɗ.ɗ
        these all mean the same thing, a mapping of the variable in the head with that
        in the body.
1.5 Beta Reduction
    -- once a function takes an argument(s) and the argument(s) is applied, the input value (the argument)
        is then subsituted for the all instances of the bound variables within the body of the
        abstraction. The head of the abstraction is then eliminated, since its only purpose was to bind a variable (ie the argument).
        ^___ is called Beta Reduction.

        *** Replacing the bound variables with the value of the argument, and eliminating the head. 
        Eliminating the head tells you the function has been applied.
        thus:
            𝝺𝞌.𝞌
            2 will be used as the argument
            this will bind the number 2 to all instances of the variable in the body.
            and eliminate the head.
            (𝝺𝞌.𝞌)2
                2
            the only bound variable is the single 𝞌 in the head
            thus applying this function to 2 returns 2, this is an identity function.
                -- it accepts one argument and returns the argument bound to it.
                    all instances of x within the function must have the same value.
    -- identity functions call also be applied to another identity function
            --(𝝺𝞌.𝞌)(𝝺ȥ.ȥ)
                this is reduce like this:
                    (𝝺𝞌.𝞌)(𝝺ȥ.ȥ)
                    [𝞌 := (𝝺ȥ.ȥ)]
                    thus the x is reduced to another identity function (𝝺ȥ.ȥ).
                    and since there is nothing to apply to the reduced intial function there is nothing to reduce.

            --(()(𝝺ȥ.ȥ))ɗ => the intial abstraction which is an identity function
                [𝞌 := (𝝺ȥ.ȥ)ɗ] => the beta reduction is applied to (𝝺𝞌.𝞌) reducing it to (𝝺ȥ.ȥ)ɗ.
                     [(𝝺ȥ.ȥ)ɗ] => beta reduction is applied again, reducing the IF to [ȥ := ɗ]
                      [ȥ := ɗ] => there is nothing else to reduce so ɗ is the evaluated result.
                            ɗ
    -- beta reduction's process stops when there are either no more heads or lambdas left to apply
        or no more arguments to apply functions to.

    -- computation process:
        1.)  intial lambda
        2.) a finite sequence of lambdas terms each deduced from the procedding term by BR.
        3.) keep following this sequence untill there are no more heads left and no more arguments to apply functions to.

    -- Free Variables (FV)
        -- head functions purpose is to bind variables in the head to variable in the body
        these variables must have the same value throughout the expression.
        -- variables that are inside of the body of the expression but not bound to the head
        are called **free variables**.
            𝝺𝞌.𝞌ȥ
            -the x in the head is bound to the x in the body
                the z is in the body but is not bound to anything in the head thus it is a FV
            - when we apply this function to an argument nothing can be done with the z its 
                irreducible.
        -- Alpha equivalence cannot be applied to FV because there is nothing to bind them to
            in the lambdas head  
1.6 Multiple arguments/Currying
    -- each lambda can only hold one argument. Functions that require multi arguments have multi
        nested heads.
        -- when it is applied and the first head is eliminated the next one is applied and so on
        untill there are no more heads.
        ex.
         𝜆𝑥𝑦.𝑥𝑦 == 𝜆𝑥.(𝜆𝑦.𝑥𝑦)
         one the first argument is applied it eliminates the first head applying the binded value
         to the value in the body leaving:

         𝜆𝑦.𝑥𝑦 with x being the intial value from the lambda head then apply beta reduction again leaving:
         𝑥𝑦
    -- the with concretes it would process like this:
        -- (𝜆𝑥𝑦.𝑥𝑦) 1 2
            1.) make it clear
            (𝜆𝑥.(𝜆𝑦.𝑥𝑦)) 1 2
            2.) the leftmost lambda head would be applied to the firstmost variable
            (𝜆𝑥.(𝜆𝑦.𝑥𝑦)) 1 2
            ^         |
            |_________|
            [𝑥 := 1]
            3.) 1 is now applied to all instances of 𝑥

            4.) There is one more argument in the head left that will be applied to the last variable.
            (𝜆𝑦.1𝑦)) 2
                ^      |
                |______|
            [𝑦 := 2]
            5.) There are no longer any arguments to apply, we are left with.
                1 2
        -- (𝜆𝑥𝑦.𝑥𝑦)(𝜆𝑧.𝑎) 1
            the sames steps are taken.
            1.) make it clearer:
                (𝜆𝑥.(𝜆𝑦.𝑥𝑦))(𝜆𝑧.𝑎) 1
                𝑥 := (𝜆𝑧.𝑎)
            1) apply leftmost lambda head, which is 𝜆𝑥 to the first variable.
                which is:
                 𝜆𝑧.𝑎.
            2.) apply to new lambda and repeat.
                (𝜆𝑦.(𝜆𝑧.𝑎)𝑦) 1
                𝑦 := 1
            3.) There are no longer any inital lambda heads.
                Now ther inner lambdas must be applied:
                (𝜆𝑧.𝑎)1
                z := 1,
            4.) there is no z in the body to apply the 1. we eliminate the head.
            5.) the final result is:
                𝑎