📝 These notes are in conjuction with the first chapter
of Haskell from first principals. I will list the chapter
and section number to make a clear distinctions.

1.2
-- Functions in Haskell are first class meaning they can be used 
    -- as values or passed as arguments or imputs in other functions
    -- ie as HOFs.
-- All FP based on lambda calculus. Haskell is a pure FPL
    -- purity == referential transparency (RT);
        -- means the same function given the same arguments to be evaluated
        -- will always return the same results in a pure FPL just as in Math.
1.3
-- Functions are relation mechanisims between a set of
    -- possible inputs and a set of possible outputs
    -- arguments are always mapped to the parameters
        ex. 😎
                ƒ(1) = A 
                ƒ(2) = B
                ƒ(3) = C
            -- the input (domain) is set to {1,2,3} and th outputs (codomain)
            -- are {A, B, C}
        -- The most important factor is that these functions will always
            return (A) given the input (1) with no exceptions.

    ex. of invalid 😵‍💫
              ƒ(1) = X
              ƒ(1) = Y
              ƒ(2) = Z
            -- this is incorrect because of the principal of RT
                the same input must produce the same output, it should be predictable
    
    -- This is valid, even though there are different inputs the outputs can have the
        same value, this is no problem

    ƒ(1) = A 
    ƒ(2) = A
    ƒ(3) = A
    -- Just as this is valid:
    ƒ (a b) = \a b -> a(3) + b(2) = 5
    ƒ (c d) = \c d -> c(4) + d(1) = 5
    ƒ (e f) = \e f -> e(5) + e(0) = 5
-- The gist is the importance of the relationship betwenn the inputs and outputs,
   that once a function is given an input the output should be predictable/consistant.

-- Functions are nothing but mappings of a set of inputs to a set of outputs. 
